set ratios 1:2:3
# interpreter for shell commands
set shell sh

# set icons
set icons true

# set previewer ~/.config/lf/preview
# set cleaner ~/.config/lf/cleaner
set previewer ctpv
set cleaner ctpvclear

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
# leave some space at the top and the bottom of the screen
set scrolloff 10

# remove some defult maps
map m
map D

# set deletion
map <backspace2> set hidden!

map c clear

map Dr trash
map Dd delete

map x extract
map z zip

map md mkdir
map mf mkfile

map gm cd /mnt

# use enter for shell commands
map <enter> shell
map i pager

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
    read ans
    mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
    read ans
    $EDITOR $ans
}}

cmd playlist ${{
    if [ -z "$fs" ]; then
        mpv "$f"
    else
        filename="/tmp/$(date +%s).m3u";
        printf "$fs" > $filename;
        mpv $filename > /dev/null 2>&1  &!;
        disown -a;
    fi
}}

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    run() {
        { setsid -f "$@" >/dev/null 2>&1 & } ||
            ({ nohup "$@" >/dev/null 2>&1 & } &) ||
            (exec "$@" >/dev/null 2>&1 &)
    }

    mime_type="$(file -b --mime-type -- "$(readlink -f $f)")"
    selected="$fs"
    if [ ! ${selected} ]; then
        selected="$f"
    fi

    case "$mime_type" in
    image/vnd.djvu | application/pdf | application/postscript | \
        application/pdf | application/epub*)
        run "${READER:-okular}" $selected
        ;;
    text/* | application/json | application/javascript | \
        application/pgp-encrypted | inode/x-empty | application/octet-stream)
        "${EDITOR:-nvim}" ${selected}
        ;;
    image/svg+xml | image/png | image/jpeg | image/gif)
        run "${IMAGE_VIEWER:-sxiv}" $selected
        ;;
    audio/*)
        run "${AUDIO_PLAYER:-"${MPV:-mpv}"}" --force-window --fs=no $selected
        ;;
    video/*)
        run "${VIDEO_PLAYER:-"${MPV:-mpv}"}" $selected
        ;;
    *)
        for f in $selected; do
            "${OPENER:-mimeopen}" $f
        done
        ;;
    esac
}}
set ifs "\n"
map o open

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash
# cmd delete %set -f; rm -rf $fx

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
set -f
case $f in
         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
         *.tar.gz|*.tgz) tar xzvf $f;;
         *.tar.xz|*.txz) tar xJvf $f;;
         *.zip) unzip $f;;
         *.rar) unrar x $f;;
         *.7z) 7z x $f;;
         esac
         }}

# compress current file or selected files with tar and gunzip
cmd tar ${{
set -f
mkdir $1
cp -r $fx $1
tar czf $1.tar.gz $1
rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
set -f
mkdir $1
cp -r $fx $1
zip -r $1.zip $1
rm -rf $1
}}

cmd pager ${{
    mime_type="$(file -b --mime-type -- "$(readlink -f "$f")")"
    case "$mime_type" in
    text/* | application/json | application/javascript | \
        application/pgp-encrypted | inode/x-empty | application/octet-stream)
        bat --paging=always -p ${f}
        ;;
    application/x-object | application/x-pie-executable)
        objdump -D ${f} | bat --paging=always -p --language=asm
        ;;
    *)
        case "${f}" in
            *.iso)
                iso-info "${f}" | less
                ;;
            *.tar)
                tar tf "${f}" | less
                ;;
            *.tar.gz)
                tar tzf "${f}" | less
                ;;
            *.zip)
                unzip -l "${f}" | less
                ;;
        esac
    esac
    
}}
